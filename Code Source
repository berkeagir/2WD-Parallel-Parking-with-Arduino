#include <NewPing.h>
//Defining where the components are attached
#define TRIG_IN A0
#define TRIG_OUT A2
#define ECHO_IN A3
#define ECHO_OUT A1
#define IN1  12 //pin IN1 --> 12
#define IN2  13 //pin IN2 -->  13
#define ENA   9 //pin Enable A --> 3 

 
// (OUT3 yellow || OUT4 purple)

#define IN3  8  //pin IN4 --> 7
#define IN4  7  //pin IN3 --> 8
#define ENB  3  //pin EnableB --> 9

#define iterations 2 //Number of readings in the calibration stage
#define MAX_DISTANCE 100 // Maximum distance (in cm) for the sensors to try to read.
#define DEFAULT_DISTANCE 15 // Default distance (in cm) is only used if calibration fails.
#define MIN_DISTANCE 10 // Minimum distance (in cm) for calibrated threshold.

float calibrate_in = 0, calibrate_out = 0; // The calibration in the setup() function will set these to appropriate values.
float distance_in, distance_out; // These are the distances (in cm) that each of the Ultrasonic sensors read.
int count = 0, limit = 2; //Occupancy limit should be set here: e.g. for maximum 8 people in the shop set 'limit = 8'.
bool prev_inblocked = false, prev_outblocked = false; //These booleans record whether the entry/exit was blocked on the previous reading of the sensor.

NewPing sonar1(TRIG_IN, ECHO_IN, MAX_DISTANCE); // Each sensor's trigger pin, echo pin, and max distance to ping.
  NewPing sonar2(TRIG_OUT, ECHO_OUT, MAX_DISTANCE);


/*
   A quick note that the sonar.ping_cm() function returns 0 (cm) if the object is out of range / nothing is detected.
   We will include a test to remove these erroneous zero readings later.
*/

void setup() {
  Serial.begin(115200); // Open serial monitor at 115200 baud to see ping results.
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
  
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);

  pinMode(TRIG_IN, OUTPUT);
  pinMode(ECHO_IN, INPUT);
  pinMode(TRIG_OUT, OUTPUT);
  pinMode(ECHO_OUT, INPUT);

  
  Serial.println("Calibrating...");
  delay(1500);
  for (int a = 0; a < iterations; a++) {
    delay(50);
    calibrate_in += sonar1.ping_cm();
    delay(200);
    
  }
  calibrate_in = 0.75 * calibrate_in / iterations; //The threshold is set at 75% of the average of these readings. This should prevent the system counting people if it is knocked.
  
  if (calibrate_in > MAX_DISTANCE || calibrate_in < MIN_DISTANCE) { //If the calibration gave a reading outside of sensible bounds, then the default is used
    calibrate_in = DEFAULT_DISTANCE;
  }
  else if (calibrate_in <= 15){
    count = 1;
  }
  

  Serial.print("Entry threshold set to: ");
  Serial.println(calibrate_in);
  
  delay(1000);
}

void loop() {
  //  Serial.print("Count: ");
  //  Serial.println(count);
  distance_in = sonar1.ping_cm();
  delay(40); // Wait 40 milliseconds between pings. 29ms should be the shortest delay between pings.
  if (distance_in < calibrate_in && distance_in > 0) { // If closer than wall/calibrated object (person is present) && throw out zero readings
    if (prev_inblocked == false) {
      count++; // Increase count by one
      Serial.print("Count: ");
      Serial.println(count);
    }
    prev_inblocked = true;
  } else {
    prev_inblocked = false;
  }
  

  if (count < limit) {
    forward();
  } else if (count = 2) {
       full_stop();
       delay(840);
       bright();
       delay(840);
       full_stop();
       delay(840);
       reversee();
       delay(900);
       full_stop();
       delay(840);
       bleft();
       delay(900);
       full_stop();
      delay(30000);
       
  }
}

void forward()
{
    analogWrite(ENA, 120);
  analogWrite(ENB, 127);
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void bright()

{
  digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB,130);  // to select duty cycle
    
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);   
    analogWrite(ENA,130);     

}

void reversee()
{
  digitalWrite(IN3, LOW);
    digitalWrite(IN4, HIGH);
    analogWrite(ENB,130);  // to select duty cycle
    
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);   
    analogWrite(ENA,130); 
}

void full_stop()
{
    digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    analogWrite(ENB,0 );  // to select duty cycle
    
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, LOW);   
    analogWrite(ENA,0);    
}

void bleft()

{
  digitalWrite(IN3, LOW);
    digitalWrite(IN4, LOW);
    analogWrite(ENB,130);  // to select duty cycle
    
    digitalWrite(IN1, LOW);
    digitalWrite(IN2, HIGH);   
    analogWrite(ENA,130);     
}
